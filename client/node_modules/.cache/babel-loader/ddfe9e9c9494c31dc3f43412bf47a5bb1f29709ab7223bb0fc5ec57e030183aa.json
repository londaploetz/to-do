{"ast":null,"code":"const express = require('express');\nconst db = require('./config/db');\nconst cors = require('cors');\nconst app = express();\nconst PORT = 3002;\napp.use(cors());\napp.use(express.json());\n\n// Route to get all posts\napp.get(\"/api/get\", (req, res) => {\n  db.query(\"SELECT * FROM posts\", (err, result) => {\n    if (err) {\n      console.log(err);\n    }\n    res.send(result);\n  });\n});\n\n// Route to get one post\napp.get(\"/api/getFromId/:id\", (req, res) => {\n  const id = req.params.id;\n  db.query(\"SELECT * FROM posts WHERE id = ?\", id, (err, result) => {\n    if (err) {\n      console.log(err);\n    }\n    res.send(result);\n  });\n});\n\n// Route for creating the post\napp.post('/api/create', (req, res) => {\n  const username = req.body.userName;\n  const title = req.body.title;\n  const text = req.body.text;\n  db.query(\"INSERT INTO posts (title, post_text, user_name) VALUES (?,?,?)\", [title, text, username], (err, result) => {\n    if (err) {\n      console.log(err);\n    }\n    console.log(result);\n  });\n});\n\n// Route to like a post\napp.post('/api/like/:id', (req, res) => {\n  const id = req.params.id;\n  db.query(\"UPDATE posts SET likes = likes + 1 WHERE id = ?\", id, (err, result) => {\n    if (err) {\n      console.log(err);\n    }\n    console.log(result);\n  });\n});\n\n// Route to delete a post\n\napp.delete('/api/delete/:id', (req, res) => {\n  const id = req.params.id;\n  db.query(\"DELETE FROM posts WHERE id= ?\", id, (err, result) => {\n    if (err) {\n      console.log(err);\n    }\n  });\n});\napp.listen(PORT, () => {\n  console.log(`Server is running on ＄{PORT}`);\n});","map":{"version":3,"names":["express","require","db","cors","app","PORT","use","json","get","req","res","query","err","result","console","log","send","id","params","post","username","body","userName","title","text","delete","listen"],"sources":["C:/Users/lploe/to-do/src/index.js"],"sourcesContent":["const express = require('express');\nconst db = require('./config/db')\nconst cors = require('cors')\n\nconst app = express();\nconst  PORT = 3002;\napp.use(cors());\napp.use(express.json())\n\n// Route to get all posts\napp.get(\"/api/get\", (req,res)=>{\ndb.query(\"SELECT * FROM posts\", (err,result)=>{\n    if(err) {\n    console.log(err)\n    } \nres.send(result)\n});   });\n\n// Route to get one post\napp.get(\"/api/getFromId/:id\", (req,res)=>{\n\nconst id = req.params.id;\n db.query(\"SELECT * FROM posts WHERE id = ?\", id, \n (err,result)=>{\n    if(err) {\n    console.log(err)\n    } \n    res.send(result)\n    });   });\n\n// Route for creating the post\napp.post('/api/create', (req,res)=> {\n\nconst username = req.body.userName;\nconst title = req.body.title;\nconst text = req.body.text;\n\ndb.query(\"INSERT INTO posts (title, post_text, user_name) VALUES (?,?,?)\",[title,text,username], (err,result)=>{\n   if(err) {\n   console.log(err)\n   } \n   console.log(result)\n});   })\n\n// Route to like a post\napp.post('/api/like/:id',(req,res)=>{\n\nconst id = req.params.id;\ndb.query(\"UPDATE posts SET likes = likes + 1 WHERE id = ?\",id, (err,result)=>{\n    if(err) {\n   console.log(err)   } \n   console.log(result)\n    });    \n});\n\n// Route to delete a post\n\napp.delete('/api/delete/:id',(req,res)=>{\nconst id = req.params.id;\n\ndb.query(\"DELETE FROM posts WHERE id= ?\", id, (err,result)=>{\nif(err) {\nconsole.log(err)\n        } }) })\n\napp.listen(PORT, ()=>{\n    console.log(`Server is running on ＄{PORT}`)\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}