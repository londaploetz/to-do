{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lploe\\\\to-do\\\\src\\\\components\\\\To-do\\\\Storage.jsx\",\n  _s = $RefreshSig$();\n// import Header from './components/Header';\n// import Tasks from './components/Tasks';\n// import AddTask from './components/AddTask';\n// // Importing React Hooks\n// import { useState, useEffect } from 'react';\n\n// function Storage() {\n//     // All States\n\n//     const [tasks, setTasks] = useState([]); // Task State\n//     const [showAddTask, setShowAddTask] = useState(false); // To reveal add task form\n//     // Pre-loader\n\n//     // Fetching from Local Storage\n//     const getTasks = JSON.parse(localStorage.getItem(\"taskAdded\"));\n//     useEffect(() => {\n//         if (getTasks == null) {\n//             setTasks([])\n//         } else {\n//             setTasks(getTasks);\n//         }\n//     }, [])\n//     // Add Task\n//     const addTask = (task) => {\n//         const id = uuidv4();\n//         const newTask = { id, ...task }\n//         setTasks([...tasks, newTask]);\n\n//         localStorage.setItem(\"taskAdded\", JSON.stringify([...tasks, newTask]));\n//     }\n//     // Delete Task\n//     const deleteTask = (id) => {\n//         const deleteTask = tasks.filter((task) => task.id !== id);\n//         setTasks(deleteTask);\n\n//         localStorage.setItem(\"taskAdded\", JSON.stringify(deleteTask));\n//     }\n//     // Edit Task\n//     const editTask = (id) => {\n//         const text = prompt(\"Task Name\");\n//         const day = prompt(\"Day and Time\");\n//         let data = JSON.parse(localStorage.getItem('taskAdded'));\n//         const myData = data.map(x => {\n//             if (x.id === id) {\n//                 return {\n//                     ...x,\n//                     text: text,\n//                     day: day,\n//                     id: uuidv4()\n//                 }\n//             }\n//             return x;\n//         })\n\n//         localStorage.setItem(\"taskAdded\", JSON.stringify(myData));\n//         window.location.reload();\n//     }\n//     retun (\n//       <>\n//             {\n//                 loading ?\n//                     <div className=\"spinnerContainer\">\n//                         <div className=\"spinner-grow text-primary\" role=\"status\">\n//                             <span className=\"visually-hidden\">Loading...</span>\n//                         </div>\n//                         <div className=\"spinner-grow text-secondary\" role=\"status\">\n//                             <span className=\"visually-hidden\">Loading...</span>\n//                         </div>\n//                         <div className=\"spinner-grow text-success\" role=\"status\">\n//                             <span className=\"visually-hidden\">Loading...</span>\n//                         </div>\n//                         <div className=\"spinner-grow text-danger\" role=\"status\">\n//                             <span className=\"visually-hidden\">Loading...</span>\n//                         </div>\n//                         <div className=\"spinner-grow text-warning\" role=\"status\">\n//                             <span className=\"visually-hidden\">Loading...</span>\n//                         </div>\n//                     </div> :\n//                     <div className=\"container\">\n//                         {/* App Header that has open and App Name */}\n//                         <Header showForm={() => setShowAddTask(!showAddTask)} changeTextAndColor={showAddTask} />\n//                         {/* Revealing of Add Task Form */}\n//                         {showAddTask && <AddTask onSave={addTask} />}\n//                         {/* Task Counter */}\n//                         <h3>Number of Tasks: {tasks.length}</h3>\n//                         {/* Displaying of Tasks */}\n//                         {\n//                             tasks.length > 0 ?\n//                                 (<Tasks tasks={tasks} onDelete={deleteTask} onEdit={editTask} />) :\n//                                 ('No Task Found!')\n//                         }\n//                     </div>\n//             }\n//         </>\n//     )\n// }\n\n// export default Storage;\n\nimport React from 'react';\nimport './todo.css';\nimport { useState, useEffect } from \"react\";\nimport pencilimg from '../../Assets/redpencil.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Storage = () => {\n  _s();\n  const [tasks, setTasks] = useState(() => {\n    const savedTasks = localStorage.getItem(\"tasks\");\n    if (savedTasks) {\n      return JSON.parse(savedTasks);\n    } else {\n      return [];\n    }\n  });\n  const [task, setTask] = useState(\"\");\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n  function handleInputChange(e) {\n    setTask(e.target.value);\n  }\n  function handleFormSubmit(e) {\n    e.preventDefault();\n    if (task !== \"\") {\n      setTasks([...tasks, {\n        id: tasks.length + 1,\n        text: task.trim()\n      }]);\n    }\n    setTask(\"\");\n  }\n  function handleDeleteClick(id) {\n    const removeItem = tasks.filter(task => {\n      return task.id !== id;\n    });\n    setTasks(removeItem);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"pencil_img\",\n      src: pencilimg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"search\",\n      onSubmit: handleFormSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: true,\n        name: \"taskbar\",\n        type: \"text\",\n        placeholder: \"add todo\",\n        value: task,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"task-list\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\" \", task.text, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeleteClick(task.id),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 53\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 8\n  }, this);\n};\n_s(Storage, \"bE7/SxYuWeUZOIUBzv9nzfB/XLU=\");\n_c = Storage;\nexport default Storage;\nvar _c;\n$RefreshReg$(_c, \"Storage\");","map":{"version":3,"names":["React","useState","useEffect","pencilimg","Storage","tasks","setTasks","savedTasks","localStorage","getItem","JSON","parse","task","setTask","setItem","stringify","handleInputChange","e","target","value","handleFormSubmit","preventDefault","id","length","text","trim","handleDeleteClick","removeItem","filter","map"],"sources":["C:/Users/lploe/to-do/src/components/To-do/Storage.jsx"],"sourcesContent":["// import Header from './components/Header';\r\n// import Tasks from './components/Tasks';\r\n// import AddTask from './components/AddTask';\r\n// // Importing React Hooks\r\n// import { useState, useEffect } from 'react';\r\n\r\n// function Storage() {\r\n//     // All States\r\n    \r\n//     const [tasks, setTasks] = useState([]); // Task State\r\n//     const [showAddTask, setShowAddTask] = useState(false); // To reveal add task form\r\n//     // Pre-loader\r\n   \r\n//     // Fetching from Local Storage\r\n//     const getTasks = JSON.parse(localStorage.getItem(\"taskAdded\"));\r\n//     useEffect(() => {\r\n//         if (getTasks == null) {\r\n//             setTasks([])\r\n//         } else {\r\n//             setTasks(getTasks);\r\n//         }\r\n//     }, [])\r\n//     // Add Task\r\n//     const addTask = (task) => {\r\n//         const id = uuidv4();\r\n//         const newTask = { id, ...task }\r\n//         setTasks([...tasks, newTask]);\r\n        \r\n//         localStorage.setItem(\"taskAdded\", JSON.stringify([...tasks, newTask]));\r\n//     }\r\n//     // Delete Task\r\n//     const deleteTask = (id) => {\r\n//         const deleteTask = tasks.filter((task) => task.id !== id);\r\n//         setTasks(deleteTask);\r\n        \r\n//         localStorage.setItem(\"taskAdded\", JSON.stringify(deleteTask));\r\n//     }\r\n//     // Edit Task\r\n//     const editTask = (id) => {\r\n//         const text = prompt(\"Task Name\");\r\n//         const day = prompt(\"Day and Time\");\r\n//         let data = JSON.parse(localStorage.getItem('taskAdded'));\r\n//         const myData = data.map(x => {\r\n//             if (x.id === id) {\r\n//                 return {\r\n//                     ...x,\r\n//                     text: text,\r\n//                     day: day,\r\n//                     id: uuidv4()\r\n//                 }\r\n//             }\r\n//             return x;\r\n//         })\r\n        \r\n//         localStorage.setItem(\"taskAdded\", JSON.stringify(myData));\r\n//         window.location.reload();\r\n//     }\r\n//     retun (\r\n//       <>\r\n//             {\r\n//                 loading ?\r\n//                     <div className=\"spinnerContainer\">\r\n//                         <div className=\"spinner-grow text-primary\" role=\"status\">\r\n//                             <span className=\"visually-hidden\">Loading...</span>\r\n//                         </div>\r\n//                         <div className=\"spinner-grow text-secondary\" role=\"status\">\r\n//                             <span className=\"visually-hidden\">Loading...</span>\r\n//                         </div>\r\n//                         <div className=\"spinner-grow text-success\" role=\"status\">\r\n//                             <span className=\"visually-hidden\">Loading...</span>\r\n//                         </div>\r\n//                         <div className=\"spinner-grow text-danger\" role=\"status\">\r\n//                             <span className=\"visually-hidden\">Loading...</span>\r\n//                         </div>\r\n//                         <div className=\"spinner-grow text-warning\" role=\"status\">\r\n//                             <span className=\"visually-hidden\">Loading...</span>\r\n//                         </div>\r\n//                     </div> :\r\n//                     <div className=\"container\">\r\n//                         {/* App Header that has open and App Name */}\r\n//                         <Header showForm={() => setShowAddTask(!showAddTask)} changeTextAndColor={showAddTask} />\r\n//                         {/* Revealing of Add Task Form */}\r\n//                         {showAddTask && <AddTask onSave={addTask} />}\r\n//                         {/* Task Counter */}\r\n//                         <h3>Number of Tasks: {tasks.length}</h3>\r\n//                         {/* Displaying of Tasks */}\r\n//                         {\r\n//                             tasks.length > 0 ?\r\n//                                 (<Tasks tasks={tasks} onDelete={deleteTask} onEdit={editTask} />) :\r\n//                                 ('No Task Found!')\r\n//                         }\r\n//                     </div>\r\n//             }\r\n//         </>\r\n//     )\r\n// }\r\n          \r\n// export default Storage;\r\n\r\n\r\nimport React from 'react';\r\nimport './todo.css';\r\nimport { useState, useEffect } from \"react\";\r\nimport pencilimg from '../../Assets/redpencil.png';\r\n\r\n\r\nconst Storage = () => {\r\n\r\n    const [tasks, setTasks] = useState(() => {\r\n\r\n        const savedTasks = localStorage.getItem(\"tasks\");\r\n        if (savedTasks) {\r\n            return JSON.parse(savedTasks);\r\n        } else {\r\n            return [];\r\n        }\r\n    });\r\n    const [task, setTask] = useState(\"\");\r\n\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    }, [tasks]);\r\n\r\n    function handleInputChange(e) {\r\n        setTask(e.target.value);\r\n    }\r\n    function handleFormSubmit(e) {\r\n        e.preventDefault();\r\n    \r\n        if (task !== \"\") {\r\n          setTasks([\r\n            ...tasks,\r\n            {\r\n              id: tasks.length + 1,\r\n              text: task.trim()\r\n            }\r\n          ]);\r\n        }\r\n    \r\n        setTask(\"\");\r\n      }\r\n    \r\n      function handleDeleteClick(id) {\r\n        const removeItem = tasks.filter((task) => {\r\n          return task.id !== id;\r\n        });\r\n        setTasks(removeItem);\r\n      }\r\n    return (\r\n       <div>\r\n        <img \r\n                className='pencil_img' \r\n      src={pencilimg}\r\n      />\r\n            <form className='search' onSubmit={handleFormSubmit}>\r\n        \r\n                <input className\r\n                    name=\"taskbar\"\r\n                    type=\"text\"\r\n                    placeholder=\"add todo\"\r\n                    value={task}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </form>\r\n            <ul className=\"task-list\">\r\n                {tasks.map((task) => (\r\n                    <li key= {task.id}> {task.text} <button onClick={() => handleDeleteClick(task.id)}>X</button></li>\r\n                    \r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n\r\n\r\n\r\nexport default Storage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}